---
# 1. Shared volume for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-volume
  namespace: k8s-monitoring-ns
spec:
  accessModes:
    - ReadWriteOnce   # Fine on single-node. Change to RWX storage class if you ever add nodes.
  resources:
    requests:
      storage: 5Gi    # Increased from 1Gi to handle longer log retention

---
# 2. Log Generator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-generator
  namespace: k8s-monitoring-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-generator
  template:
    metadata:
      labels:
        app: log-generator
    spec:
      containers:
      - name: log-generator
        image: mingrammer/flog:0.4.3
        args:
        - --loop
        - --format=json
        - --number=10        # 10 log lines per second
        - --delay=100ms
        - --output=/var/log/generated-logs.txt
        # - --overwrite       # Removed: ensures file is appended, not reset
        - --type=log
        volumeMounts:
        - name: log-storage
          mountPath: /var/log
      volumes:
      - name: log-storage
        persistentVolumeClaim:
          claimName: logs-volume

---
# 3. Promtail to ship logs to Loki with JSON parsing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: promtail
  namespace: k8s-monitoring-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:3.4.3
        args:
        - -config.file=/etc/promtail/config.yaml
        volumeMounts:
        - name: log-storage
          mountPath: /var/log                # Mount shared logs
        - name: promtail-config
          mountPath: /etc/promtail           # ConfigMap with promtail config
        - name: promtail-positions
          mountPath: /positions              # Persist positions file
      volumes:
      - name: log-storage
        persistentVolumeClaim:
          claimName: logs-volume
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: promtail-positions
        emptyDir: {}                        # Persist positions across restarts in same pod lifecycle
                                            # For true persistence, replace with a PVC

---
# 4. Promtail ConfigMap with JSON parsing stage
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: k8s-monitoring-ns
data:
  config.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
      log_level: "info"

    positions:
      filename: /positions/positions.yaml

    clients:
      - url: http://loki-gateway.k8s-monitoring-ns.svc.cluster.local/loki/api/v1/push
        tenant_id: fake  # Only required if multi-tenancy enabled. Ignored otherwise.

    scrape_configs:
      - job_name: generated-logs
        static_configs:
          - labels:
              job: generated-logs
              __path__: /var/log/generated-logs.txt
        pipeline_stages:
          - json:
              expressions:
                http_method: method
                http_status: status
          - labels:
              http_method:
              http_status:



# ---
# # 5. Metrics Exporter
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: metrics-exporter
#   namespace: k8s-monitoring-ns
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: metrics-exporter
#   template:
#     metadata:
#       labels:
#         app: metrics-exporter
#     spec:
#       containers:
#       - name: metrics-exporter
#         image: rslim087/metrics-exporter:latest
#         ports:
#         - containerPort: 8082
#           name: metrics
#         volumeMounts:
#         - name: log-storage
#           mountPath: /var/log
#       volumes:
#       - name: log-storage
#         persistentVolumeClaim:
#           claimName: logs-volume
# ---
# # 6. Metrics Exporter Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: metrics-exporter
#   namespace: k8s-monitoring-ns
#   labels:
#     app: metrics-exporter
# spec:
#   ports:
#   - port: 8082
#     targetPort: 8082
#     name: metrics
#   selector:
#     app: metrics-exporter
# ---
# # 7. ServiceMonitor for Prometheus to scrape the metrics
# apiVersion: monitoring.coreos.com/v1
# kind: ServiceMonitor
# metadata:
#   name: metrics-exporter
#   namespace: k8s-monitoring-ns
#   labels:
#     release: prometheus  # This should match your Prometheus selector
# spec:
#   selector:
#     matchLabels:
#       app: metrics-exporter
#   endpoints:
#   - port: metrics
#     interval: 15s